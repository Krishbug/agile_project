index.html
--------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./style.css" />
    <script src="./script.js" defer></script>
    <title>Todo</title>
  </head>
  <body>
    <!-- login page -->
    <nav>
      <a href="login.html"></a>
      <a href="signup.html"></a>
    </nav>
    <div id="todoApp">
      <h1>Your To-Do List</h1>
    </div>
    <!-- login page end-->
  
    <!-- logout page -->
    <nav>
      <button id="logoutButton">Logout</button>
    </nav>
    <!-- logout page end-->
     <br>
    <section class="todo">
      <h2>To-do list</h2>
      <div class="input">
        <input
          type="text"
          class="input-field"
          id="todoInput"
          placeholder="Add a new todo"
        />
        <button class="btn">Add</button>
      </div>
      <ul class="scroll">
        <li id="todoList"></li>
      </ul>
      <div>
        <hr class="counter" />
        <div class="counter-container">
          <p><span id="todoCount">0</span> items total</p>
          <button id="deleteButton">Delete All</button>
        </div>
      </div>
    </section>
    <br>
    <footer>
      <div class="footer">
        <p class="made-by">Made By</p>
        <p class="author">Krishna, Lokprasaath, Vaibhav, Akshata</p>
      </div>
    </footer>
  </body>
</html>

------------------------------------------------------------------------------------------

login.html
----------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="form-container">
    <form id="loginForm" onsubmit="handleLogin(event)">
      <h2>Login</h2>
      <label for="loginEmail">Email:</label>
      <input type="email" id="loginEmail" placeholder="Enter your email" required>
      <label for="loginPassword">Password:</label>
      <input type="password" id="loginPassword" placeholder="Enter your password" required>
      <button type="submit">Login</button><br><br>
      <p>Don't have an account? <a href="signup.html">Sign up here</a></p>
    </form>
  </div>
  <script src="script.js"></script>
</body>
</html>

---------------------------------------------------------------------------------------
signup.html
---------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Signup</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="form-container">
    <form id="signupForm" onsubmit="handleSignup(event)">
      <h2>Signup</h2>
      <label for="signupEmail">Email:</label>
      <input type="email" id="signupEmail" placeholder="Enter your email" required>
      <label for="signupPassword">Password:</label>
      <input type="password" id="signupPassword" placeholder="Enter your password" required>
      <label for="confirmPassword">Confirm Password:</label>
      <input type="password" id="confirmPassword" placeholder="Confirm your password" required>
      <button type="submit">Sign Up</button><br><br>
      <p>Already have an account? <a href="login.html">Login here</a></p>
    </form>
  </div>
  <script src="script.js"></script>
</body>
</html>

---------------------------------------------------------------------------------------
style.css
---------------------------------------------------------------------------------------

:root {
    --gradient: linear-gradient(
      180deg,
        rgba(128, 128, 128, 0.73) 0%,
        #1e1e1e 100%

    );
    --dark: #001747;
    --grey: #b1bacb;
    --grey-border: rgba(210, 210, 210, 0.75);
    --grey-light: #eeeeee;
    --grey-dark: $405175;
    --blue: #2d70fd;
    --green: #00d8a7;
    --white: #ffffff;
  }
  
  body {
    background: var(--gradient);
    margin: 0;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: center;
  }
  
  .btn {
    color: var(--white);
    font-size: 1.1rem;
    padding: 0.7rem 1.5rem;
    border-radius: 0.3rem;
    background-color: var(--blue);
    border: none;
    position: absolute;
    right: 0.5rem;
    bottom: 0.5rem;
  }
  
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    margin: 0;
  }
  
  /* Todo Container */
  
  .todo {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    border-radius: 2rem;
    background: var(--white);
    padding: 3rem;
    height: 50%;
    width: 60%;
    box-shadow: 0 1rem 3rem 1rem rgba(0, 23, 71, 0.15);
    max-width: 30rem;
  }
  
  h2 {
    text-transform: uppercase;
    height: 3rem;
    color: var(--dark);
    text-align: center;
  }
  
  .input {
    position: relative;
    display: flex;
  }
  
  .input-field {
    width: 100%;
    border: 0.06rem solid #d2d2d2bf;
    border-radius: 0.5rem;
    padding: 1.25rem;
    font-size: 1rem;
  }
  
  input[type="text"]::placeholder {
    color: var(--grey);
  }
  
  .todo-container {
    display: flex;
    gap: 1rem;
  }
  
  ul {
    padding: 0;
    margin: 0;
    overflow-y: scroll;
  }
  
  li {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
    padding: 1.3rem;
  }
  
  #todoList p {
    display: flex;
    gap: 1rem;
    color: var(--dark);
    align-items: center;
  }
  
  #todoList .disabled {
    color: #8f98a8;
  }
  
  .disabled {
    display: flex;
    text-decoration: line-through;
  }
  
  input[type="checkbox"] {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    cursor: pointer;
  }
  
  input[type="checkbox"]::before {
    content: "\2713";
    display: inline-block;
    width: 2rem;
    height: 2rem;
    font-size: 1.7rem;
    text-align: center;
    border: 0.06rem solid var(--grey-border);
    border-radius: 50%;
    color: transparent;
  }
  
  input[type="checkbox"]:checked::before {
    color: var(--white);
    background-color: var(--green);
    border: 0.06rem solid var(--green);
    border-radius: 50%;
  }
  
  .counter {
    border: 0.06rem solid var(--grey-light);
  }
  
  .counter-container {
    height: 2rem;
    display: flex;
    justify-content: space-between;
    color: var(--grey);
  }
  
  .counter-container p {
    align-self: center;
  }
  
  .counter-container button {
    border: none;
    background-color: transparent;
    color: var(--grey);
    font-size: 1rem;
  }
  
  .footer {
    display: flex;
    gap: 1.8rem;
    background-color: var(--white);
    padding: 1.2rem;
    border-radius: 0.5rem;
  }
  
  .made-by,
  .author {
    font-size: 0.9rem;
  }
  
  .made-by {
    color: var(--dark);
  }
  
  .author {
    color: var(--dark);
    font-weight: bold;
  }
  
  .scroll {
    height: 15rem;
    scrollbar-width: thin;
  }
  
  .scroll::-webkit-scrollbar {
    width: 0.6rem;
  }
  
  .scroll::-webkit-scrollbar-thumb {
    background-color: var(--blue);
    border-radius: 0.5rem;
  }
  
  .scroll::-webkit-scrollbar-track {
    display: none;
  }


/* login page  */
body {
  font-family: Arial, sans-serif;
  background-color: #f5f5f5;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.form-container {
  width: 350px;
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  text-align: center;
}

form label {
  display: block;
  margin: 10px 0 10px;
}

form input {
  width: 100%;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

form button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

form button:hover {
  background-color: #0056b3;
}


/* logout page  */
nav {
  display: flex;
  justify-content: flex-end;
}

#logoutButton {
  padding: 10px 20px;
  background-color: var(--blue);
  color: white;
  border: black;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

#logoutButton:hover {
  background-color: var(--blue);
}


---------------------------------------------------------------------------------------
script.js
---------------------------------------------------------------------------------------
// Retrieve todo from local storage or initialize an empty array
let todo = JSON.parse(localStorage.getItem("todo")) || [];
const todoInput = document.getElementById("todoInput");
const todoList = document.getElementById("todoList");
const todoCount = document.getElementById("todoCount");
const addButton = document.querySelector(".btn");
const deleteButton = document.getElementById("deleteButton");

// Initialize
document.addEventListener("DOMContentLoaded", function () {
  addButton.addEventListener("click", addTask);
  todoInput.addEventListener("keydown", function (event) {
    if (event.key === "Enter") {
      event.preventDefault(); // Prevents default Enter key behavior
      addTask();
    }
  });
  deleteButton.addEventListener("click", deleteAllTasks);
  displayTasks();
});

function addTask() {
  const newTask = todoInput.value.trim();
  if (newTask !== "") {
    todo.push({ text: newTask, disabled: false });
    saveToLocalStorage();
    todoInput.value = "";
    displayTasks();
  }
}

function displayTasks() {
  todoList.innerHTML = "";
  todo.forEach((item, index) => {
    const p = document.createElement("p");
    p.innerHTML = `
      <div class="todo-container">
        <input type="checkbox" class="todo-checkbox" id="input-${index}" ${
      item.disabled ? "checked" : ""
    }>
        <p id="todo-${index}" class="${
      item.disabled ? "disabled" : ""
    }" onclick="editTask(${index})">${item.text}</p>
      </div>
    `;
    p.querySelector(".todo-checkbox").addEventListener("change", () =>
      toggleTask(index)
    );
    todoList.appendChild(p);
  });
  todoCount.textContent = todo.length;
}

function editTask(index) {
  const todoItem = document.getElementById(`todo-${index}`);
  const existingText = todo[index].text;
  const inputElement = document.createElement("input");

  inputElement.value = existingText;
  todoItem.replaceWith(inputElement);
  inputElement.focus();

  inputElement.addEventListener("blur", function () {
    const updatedText = inputElement.value.trim();
    if (updatedText) {
      todo[index].text = updatedText;
      saveToLocalStorage();
    }
    displayTasks();
  });
}

function toggleTask(index) {
  todo[index].disabled = !todo[index].disabled;
  saveToLocalStorage();
  displayTasks();
}

function deleteAllTasks() {
  todo = [];
  saveToLocalStorage();
  displayTasks();
}

function saveToLocalStorage() {
  localStorage.setItem("todo", JSON.stringify(todo));
}



// login page 

// Handle Login
function handleLogin(event) {
  event.preventDefault();
  const email = document.getElementById("loginEmail").value;
  const password = document.getElementById("loginPassword").value;

  // Mock user data (replace with your backend logic)
  const registeredUsers = JSON.parse(localStorage.getItem("users")) || [];
  const user = registeredUsers.find(u => u.email === email && u.password === password);

  if (user) {
    localStorage.setItem("loggedInUser", email); // Save login status
    alert("Login successful!");
    window.location.href = "index.html"; // Redirect to To-Do List
  } else {
    alert("Invalid email or password.");
  }
}

// Handle Signup
function handleSignup(event) {
  event.preventDefault();
  const email = document.getElementById("signupEmail").value;
  const password = document.getElementById("signupPassword").value;
  const confirmPassword = document.getElementById("confirmPassword").value;

  if (password !== confirmPassword) {
    alert("Passwords do not match!");
    return;
  }

  // Save new user
  const users = JSON.parse(localStorage.getItem("users")) || [];
  if (users.find(u => u.email === email)) {
    alert("Email already registered.");
    return;
  }

  users.push({ email, password });
  localStorage.setItem("users", JSON.stringify(users));
  alert("Signup successful! Please log in.");
  window.location.href = "login.html"; // Redirect to login
}

// Check if user is logged in on To-Do List page
if (window.location.pathname.endsWith("index.html")) {
  const loggedInUser = localStorage.getItem("loggedInUser");
  if (!loggedInUser) {
    alert("Please log in to access your To-Do List.");
    window.location.href = "login.html"; // Redirect to login page
  }
}

// Logout page

const logoutButton = document.getElementById("logoutButton");

logoutButton.addEventListener("click", () => {
  // Clear the logged-in user from localStorage
  localStorage.removeItem("loggedInUser");

  // Redirect to the login page
  window.location.href = "login.html";
});

// Redirect to login page if the user is not logged in
if (!localStorage.getItem("loggedInUser")) {
  alert("Please log in to access the To-Do List.");
  window.location.href = "login.html";
}
